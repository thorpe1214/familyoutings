// app/events/[id]/page.tsx
// Purpose: Server-rendered splash page for a single event with basic details.
// Best practices:
// - Use generateMetadata for SEO.
// - Fetch via our own API route to keep RLS behavior identical to the list page.
// - Build a robust "when/where" display even if some fields are missing.

import Link from "next/link";
import dayjs from "dayjs";
import type { EventItem } from "@/lib/types";
import type { Metadata } from "next";
import { headers } from "next/headers";
import WeatherChip from "@/components/WeatherChip";

type PageProps = {
  params: { id: string };
};

// Helper: build the base URL on the server using request headers.
// This avoids hard-coding site URL which can be missing in certain envs.
function getBaseUrlFromHeaders() {
  const h = headers();
  const host = h.get("x-forwarded-host") ?? h.get("host");
  const proto = h.get("x-forwarded-proto") ?? "http";
  if (!host) return ""; // as a fallback, relative fetch may still work locally
  return `${proto}://${host}`;
}

// Fetch one event via our API route. "no-store" keeps it fresh during build-out.
async function fetchEventRow(id: string): Promise<any | null> {
  const base = getBaseUrlFromHeaders();
  const res = await fetch(`${base}/api/events/${encodeURIComponent(id)}`, { cache: "no-store" });
  if (res.status === 404) return null;
  if (!res.ok) throw new Error(`Failed to load event (${res.status})`);
  const json = await res.json();
  // Support both { item } envelope and legacy raw row during migration.
  return json?.item ?? json ?? null;
}

// Fallback: server-side fetch for an autogenerated description when the base
// row has an empty description. Keep it server-side to avoid flash-of-empty.
async function fetchAutoDescription(id: string): Promise<string | null> {
  const base = getBaseUrlFromHeaders();
  try {
    const res = await fetch(`${base}/api/events/${encodeURIComponent(id)}/description`, {
      cache: "no-store",
    });
    if (!res.ok) return null;
    const json = await res.json();
    return typeof json?.description === "string" ? json.description : null;
  } catch {
    return null;
  }
}

export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const row = await fetchEventRow(params.id).catch(() => null);
  const title = row?.title ? `${row.title} ¬∑ FamilyOutings` : "Event ¬∑ FamilyOutings";
  const description = (row?.description ? String(row.description) : "Family-friendly event")
    .replace(/\s+/g, " ")
    .slice(0, 150);
  return { title, description };
}

export default async function EventDetails({ params }: PageProps) {
  const row = await fetchEventRow(params.id);
  if (!row) {
    return (
      <div className="max-w-2xl mx-auto p-6 flex flex-col gap-5">
        <nav>
          <Link href="/" className="text-sm text-blue-600 hover:underline">‚Üê Back to list</Link>
        </nav>
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <h1 className="text-xl font-semibold mb-2">Event not found</h1>
          <p className="text-gray-600">The event you‚Äôre looking for may have been removed or is no longer available.</p>
        </div>
        <footer className="text-sm text-gray-600 border-t pt-4">
          Family-friendly status is based on organizer info and community input; not guaranteed. Please use discretion.
        </footer>
      </div>
    );
  }
  const rawAge = (row.age_band as string) || "All Ages";
  const normAge = rawAge === "0-5" ? "0‚Äì5" : rawAge === "13-17" ? "Teens" : (rawAge as string);

  const event: EventItem = {
    id: String(row.id),
    title: row.title as string,
    start: row.start_utc as string,
    end: row.end_utc as string,
    venue: (row.venue_name as string) || "",
    address: (row.address as string) || "",
    lat: (row.lat as number) ?? undefined,
    lon: (row.lon as number) ?? undefined,
    isFree: Boolean(row.is_free),
    priceMin: (row.price_min as number) ?? 0,
    priceMax: (row.price_max as number) ?? 0,
    age: normAge as EventItem["age"],
    indoorOutdoor: (row.indoor_outdoor as EventItem["indoorOutdoor"]) || "Indoor",
    familyClaim: (row.family_claim as string) || "",
    parentVerified: Boolean(row.parent_verified),
    source: { name: (row.source as string) || "", url: (row.source_url as string) || "" },
    description: (row.description as string) || "",
    tags: (row.tags as string[]) || [],
  };

  const start = dayjs(event.start);
  const end = dayjs(event.end);
  const dateStr = start.isValid() && end.isValid()
    ? `${start.format("dddd, MMMM D, YYYY")} ¬∑ ${start.format("h:mm A")}‚Äì${end.format("h:mm A")}`
    : start.isValid()
    ? `${start.format("dddd, MMMM D, YYYY")} ¬∑ ${start.format("h:mm A")}`
    : "Date/time TBA";

  // If no human-written description, try AI fallback (server-side).
  const autoDescription = event.description ? null : await fetchAutoDescription(params.id);

  return (
    <div className="max-w-2xl mx-auto p-6 flex flex-col gap-5">
      <nav>
        <Link href="/" className="text-sm text-blue-600 hover:underline">‚Üê Back to list</Link>
      </nav>
      <header className="flex flex-col gap-1">
        <h1 className="text-2xl font-bold">{event.title}</h1>
        <p className="text-sm text-gray-600">{dateStr}</p>
        <p>
          <span className="font-medium">{event.venue}</span>{" "}
          <span className="text-gray-600">{event.address}</span>
        </p>
        <div className="flex flex-wrap gap-2 mt-1 text-sm">
          <Badge variant={event.isFree ? "free" : "paid"}>
            {event.isFree ? "Free" : `Paid${event.priceMin ? ` $${event.priceMin}` : ""}`}
          </Badge>
          <Badge>{`Ages: ${event.age}`}</Badge>
          <Badge>{event.indoorOutdoor}</Badge>
          {event.parentVerified && <Badge variant="parent">‚≠ê Parent-Verified</Badge>}
          {/* Weather chip (server-side) */}
          <WeatherChip eventId={event.id} lat={event.lat} lon={event.lon} startsAt={event.start} />
        </div>
      </header>
      <section className="space-y-3">
        {/* Preserve line breaks; keep as text (no HTML injection). */}
        {event.description ? (
          <p className="whitespace-pre-wrap">{event.description}</p>
        ) : autoDescription ? (
          <div>
            <p className="whitespace-pre-wrap">{autoDescription}</p>
            <p className="text-xs text-gray-500 mt-1">Description autogenerated</p>
          </div>
        ) : (
          <p className="text-gray-600">No description available yet.</p>
        )}
        {event.familyClaim && (
          <blockquote className="border-l-4 pl-3 text-gray-700">
            {event.familyClaim}
          </blockquote>
        )}
        {event.tags?.length ? (
          <p className="text-sm text-gray-600">Tags: {event.tags.join(", ")}</p>
        ) : null}
      </section>
      <div className="flex gap-3">
        <a
          href={`/api/ics?id=${encodeURIComponent(event.id)}`}
          className="inline-flex items-center gap-2 px-3 py-2 rounded border border-gray-300 hover:bg-gray-50"
        >
          <span>üìÖ</span> <span>Add to Calendar</span>
        </a>
        <a
          href={event.source.url}
          target="_blank"
          rel="noopener noreferrer"
          className="inline-flex items-center gap-2 px-3 py-2 rounded border border-gray-300 hover:bg-gray-50"
        >
          <span>üîó</span> <span>Visit organizer</span>
        </a>
      </div>
      <footer className="text-sm text-gray-600 border-t pt-4">
        Family-friendly status is based on organizer info and community input; not guaranteed. Please use discretion.
      </footer>
    </div>
  );
}

function Badge({ children, variant }: { children: React.ReactNode; variant?: "free" | "paid" | "parent" }) {
  const base = "text-sm px-2 py-0.5 rounded-full";
  const styles =
    variant === "free"
      ? " bg-green-100 text-green-800"
      : variant === "paid"
      ? " bg-blue-100 text-blue-800"
      : variant === "parent"
      ? " bg-yellow-100 text-yellow-800 font-medium"
      : " bg-gray-100 text-gray-700";
  return <span className={`${base}${styles}`}>{children}</span>;
}
